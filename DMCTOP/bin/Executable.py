from keras.models import load_model
from Finetuning import Finetuning
import numpy as np
import argparse
import os


"""
Part 1, define amino acid map
"""

AAMap = {'G': 0, 'A': 1, 'V': 2, 'L': 3, 'I': 4, 'P': 5, 'F': 6, 'W': 7, 'M': 8, 'Y': 9, 'S': 10, 'T': 11, 'C': 12,
         'N': 13, 'Q': 14, 'D': 15, 'E': 16, 'K': 17, 'R': 18, 'H': 19,'NoSeq': 20}
    
"""
Part 2, Load seqeunce from fasta
"""  

def printWarmingMessage(seq):
    if len(seq) > 700:
        print ('Too long, please provide a shorter one.')
        exit(1)


def processFastaFile(fastaFileInput):
    file = open(fastaFileInput, 'r')
    file.readline()
    seq = file.readline().rstrip()
    seqLength = len(seq)
    printWarmingMessage(seq)
    sequence_vector = np.zeros([700, 21])
    for i in range(0, seqLength):
        sequence_vector[i, AAMap[seq[i]]] = 1
    for i in range(seqLength, 700):
        sequence_vector[i, -1] = 1
    return sequence_vector


"""
Part 3, Load profile generated by psiblast
"""

def logistic(t):
    return 1.0 / (1 + np.exp(-t))

def processPssMFile(PSSMFileName):
    npArr = np.zeros([700, 21])
    index = 0
    with open(PSSMFileName) as fileIn:
        next(fileIn)
        next(fileIn)
        for line in fileIn:
            if '-I' in line:
                print ('bad profile file, it contains -I in the profile!')
                exit(-1)
            elements = line.split()
            if (len(elements) == 44 or len(elements) == 22):
                npArr[index, 0:20] = [logistic(int(x)) for x in elements[2:22]]
                index = index + 1
    for i in range(index, 700):
        npArr[i, -1] = 1
    return npArr


"""
Part 4, Deal predicted results
"""

def convertPredictResulttoHumanReadable(predictedSS):
    predSS = np.argmax(predictedSS, axis=-1)
    # convert back map meaning; 0 for Outer-side, 1 for TM-Helix, 2 for Inner-side, 3 for noSeq
    ssConvertMap = {0: 'O', 1: 'M', 2: 'I', 3: ''}
    result = []
    for i in range(0, 700):
        result.append(ssConvertMap[predSS[i]])
    return ''.join(result)

##############################################################################################################


def main():
    """
    You should only change BASIC_DIR to the path you download the tool

    """
    # Construct the usage.
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--sequence', help='Input the protein sequence')
    parser.add_argument('-p', '--profile', help='Input the protein profile')
    parser.add_argument('-m', '--model', help='Deep neural network model for DMCTOP')
    # Parse the args input by users.
    args = parser.parse_args()    
    # Begin
    
    finetuning = Finetuning()
    
    sequenceFile = args.sequence
    sequence_vector = processFastaFile(sequenceFile)
    sequence_vector = np.reshape(sequence_vector, (1, 700, 21))
    
    profileFile = args.profile
    profile_vector = processPssMFile(profileFile)
    profile_vector = np.reshape(profile_vector, (1, 700, 21))
    
    DMCTOPmodel = args.model
    Resultseq = ''
    model = load_model(DMCTOPmodel)
    predictedResult = model.predict([sequence_vector, profile_vector])
    PredictedResult = np.reshape(predictedResult, (700, 4))
    finalResult = convertPredictResulttoHumanReadable(PredictedResult)
    for each_item in finalResult:
        Resultseq += each_item
    FinalResult = finetuning.Result(Resultseq.strip()) 
    print ('Topology Results:')
    print (FinalResult)


if __name__ == "__main__": 
    main()

# cmd = python3 Executable.py -s /home/yangyn/AB00003.fasta -p /home/yangyn/AB00003.pssm -m /home/yangyn/DMCTOP/data/model.h5